using Plots

"""
    ternary_contour!(plot, f::Function, stepsize=0.02; coord_system=nothing)
plot: plot generated by ternary_plot
f: function of either ternary or cartesian coordinates, must be defined over entire unit square in either case
stepsize: determines how fine the grid used to calculate contours is, smaller is finer
coord_system: either \"cartesian\" or \"ternary\"
"""
function ternary_contour!(plot, f::Function; stepsize=0.02, coord_system=nothing)
    if coord_system === nothing
        if applicable(f, (0.3, 0.3, 0.4)) || applicable(f, (0.3, 0.3, 0.4)...)
            coord_system = "ternary"
        elseif applicable(f, (0.3, 0.3)) || applicable(f, (0.3, 0.3)...)
            coord_system = "cartesian"
        else
            error("""Cannot determine co-ordinate system,
            please specify either coord_system=\"ternary\" or coord_system=\"cartesian\"""")
        end
    end
    xs = 0:stepsize:1
    ys = 0:stepsize:1
    zs = zeros(length(xs), length(ys))
    if coord_system == "ternary"
        for (j, numj) in enumerate(ys)
            for (i, numi) in enumerate(xs)
                zs[i, j] = f(cart2tern(numj, numi)...)
            end
        end
    else
        for (j, numj) in enumerate(ys)
            for (i, numi) in enumerate(xs)
                zs[i, j] = f(numj, numi)
            end
        end
    end
    return ternary_contour!(plot, zs, stepsize)
end


"""
    ternary_contour!(plot, f::Function, stepsize=0.02; coord_system=nothing)
plot: plot generated by ternary_plot
z: an array of size (1/stepsize, 1/stepsize)
stepsize: determines how fine the grid used to calculate contours is, smaller is finer
"""
function ternary_contour!(plot, z::AbstractArray; stepsize=0.02)
    xs = 0:stepsize:1
    ys = 0:stepsize:1
    if size(z) != size(length(xs), length(ys))
        error("""Array dimensions must match, contours are calculated for all cartesian values in the unit square. \n
        z expected to be $(size(length(xs), length(ys))) but got $(size(z))""")
    end
    Plots.contour!(plot, xs, ys, zs, lw=1, lc=:black, axes=nothing, border=:none, ticks=false, legend=false, colour=:black)
    Plots.plot!(plot, Shape([(-0.5, 0), (-0.5, 1), (1.5, 1), (1.5, -0.5), (-0.5, -0.5), (-0.5, 0), (1, 0), (0.5, âˆš3 / 2), (0, 0)]), colour=:white, linewidth=0, linealpha=0)
    return ternary_plot!(plot,
        ticks=false,
        grid_major=false,
        grid_minor=false,
        tick_length=0
        )
end